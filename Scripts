# Instale os pacotes (apenas na primeira vez)
install.packages("BiocManager")
BiocManager::install(c("GEOquery", "limma", "WGCNA"))

# Carregue os pacotes na sua sessão de trabalho
library(GEOquery)
library(limma)
library(WGCNA)

Passo 2: Baixe e Prepare os Dados do GEO

Utilize o pacote GEOquery para baixar o conjunto de dados de câncer de mama GSE42568 diretamente do repositório. Em seguida, selecione as 300 primeiras amostras para a análise.
R

# Baixe os dados do GEO
gse <- getGEO("GSE42568", GSEMatrix = TRUE)
eset <- gse[[1]] # Extrai o conjunto de dados

# Crie um subconjunto com as 300 primeiras amostras
eset_subset <- eset[, 1:300]

Passo 3: Análise de Expressão Diferencial com limma

Esta etapa identifica os genes que se expressam de forma significativamente diferente entre os grupos de amostras (tumor vs. controle).
R

# Carrega os pacotes necessários
library(GEOquery)
library(limma)

# Cria pasta para salvar resultados
dir.create("results", showWarnings = FALSE)

# Baixa o dataset do GEO
gse <- getGEO("GSE2034", GSEMatrix = TRUE, AnnotGPL = TRUE)
eset <- gse[[1]]  # Extrai o conjunto de dados

# Converte ExpressionSet para matriz numérica (necessário para limma)
exprs_data <- exprs(eset)

# Se quiser testar sem travar a máquina, pegue um subconjunto
# exprs_data <- exprs_data[, 1:10]  # opcional para teste rápido

# Define os grupos
# Ajuste o número de amostras para bater com o número de colunas do seu dataset
# Exemplo: se forem 22 amostras
n_samples <- ncol(exprs_data)
# Vamos dividir em dois grupos iguais ou quase iguais
n_groupA <- floor(n_samples/2)
n_groupB <- n_samples - n_groupA
group_factor <- factor(c(rep("grupoA", n_groupA), rep("grupoB", n_groupB)))

# Cria a matriz de design
design <- model.matrix(~0 + group_factor)
colnames(design) <- levels(group_factor)

# Ajusta o modelo linear e calcula os contrastes
fit <- lmFit(exprs_data, design)
contrast.matrix <- makeContrasts(grupoA - grupoB, levels=design)
fit2 <- contrasts.fit(fit, contrast.matrix)
fit2 <- eBayes(fit2)

# Extrai os resultados e salva
top_genes <- topTable(fit2, adjust.method="BH", n=Inf)
write.csv(top_genes, "results/tabela_genes_diferenciais.csv")

# Mensagem de confirmação
cat("Análise concluída! Resultados salvos em 'results/tabela_genes_diferenciais.csv'\n")


Passo 4: Análise de Coexpressão com WGCNA

library(WGCNA)

# Se quiser, use só subconjunto de dados para teste rápido
# datExpr <- exprs_data[, 1:20]  # opcional
datExpr <- t(exprs_data)  # WGCNA espera linhas = amostras, colunas = genes

# Verifica se há valores ausentes
gsg <- goodSamplesGenes(datExpr, verbose = 3)
if (!gsg$allOK) {
  # Remove genes/amostras ruins se houver
  datExpr <- datExpr[gsg$goodSamples, gsg$goodGenes]
}

# Escolha da potência (soft threshold)
power_sft <- pickSoftThreshold(datExpr, networkType = "unsigned")

# Constrói a rede e detecta módulos (exemplo simplificado)
net <- blockwiseModules(
  datExpr,
  power = power_sft$powerEstimate,
  TOMType = "unsigned",
  minModuleSize = 30,
  reassignThreshold = 0,
  mergeCutHeight = 0.25,
  numericLabels = TRUE,
  verbose = 3
)

# Extrai os módulos e salva
module_colors <- net$colors
dir.create("results", showWarnings = FALSE)
write.csv(module_colors, "results/modulos_wgcna.csv")

cat("WGCNA concluído! Resultados salvos em 'results/modulos_wgcna.csv'\n")

